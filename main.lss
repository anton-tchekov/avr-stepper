
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000116  0000018a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000012  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, OCTETS
  4 .debug_aranges 00000040  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   000007c9  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000724  00000000  00000000  000009ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_line   000002b2  00000000  00000000  00001111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_frame  00000050  00000000  00000000  000013c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000348  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    000000f4  00000000  00000000  0000175c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00000010  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e1       	ldi	r30, 0x16	; 22
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  8e:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <next_step>:
	0x06, /* 0110 */
	0x02  /* 0010 */
};

uint8_t next_step(uint8_t *state, uint8_t param)
{
  96:	fc 01       	movw	r30, r24
	uint8_t step, ret;
	step = *state;
  98:	20 81       	ld	r18, Z
	ret = step_list[step - 0x80];
  9a:	a2 2f       	mov	r26, r18
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	a0 58       	subi	r26, 0x80	; 128
  a0:	bf 4f       	sbci	r27, 0xFF	; 255
  a2:	8c 91       	ld	r24, X

	if(param & 1)
  a4:	61 fb       	bst	r22, 1
  a6:	99 27       	eor	r25, r25
  a8:	90 f9       	bld	r25, 0
  aa:	60 ff       	sbrs	r22, 0
  ac:	14 c0       	rjmp	.+40     	; 0xd6 <next_step+0x40>
	{
		/* full step */
		if((param >> 1) & 1)
		{
			if(step % 2 == 0)
  ae:	32 2f       	mov	r19, r18
  b0:	31 70       	andi	r19, 0x01	; 1
		if((param >> 1) & 1)
  b2:	99 23       	and	r25, r25
  b4:	41 f0       	breq	.+16     	; 0xc6 <next_step+0x30>
			{
				++step;
  b6:	91 e0       	ldi	r25, 0x01	; 1
			if(step % 2 == 0)
  b8:	31 11       	cpse	r19, r1
			}
			else
			{
				step += 2;
  ba:	92 e0       	ldi	r25, 0x02	; 2
  bc:	92 0f       	add	r25, r18
			}

			if(step == 0x88)
  be:	98 38       	cpi	r25, 0x88	; 136
  c0:	81 f4       	brne	.+32     	; 0xe2 <next_step+0x4c>
			{
				step = 0x80;
  c2:	90 e8       	ldi	r25, 0x80	; 128
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <next_step+0x4c>
		}
		else
		{
			if(step % 2 == 0)
			{
				--step;
  c6:	9f ef       	ldi	r25, 0xFF	; 255
			if(step % 2 == 0)
  c8:	31 11       	cpse	r19, r1
			}
			else
			{
				step -= 2;
  ca:	9e ef       	ldi	r25, 0xFE	; 254
  cc:	92 0f       	add	r25, r18
			}

			if(step == 0x7E)
  ce:	9e 37       	cpi	r25, 0x7E	; 126
  d0:	41 f4       	brne	.+16     	; 0xe2 <next_step+0x4c>
			{
				step = 0x86;
  d2:	96 e8       	ldi	r25, 0x86	; 134
  d4:	06 c0       	rjmp	.+12     	; 0xe2 <next_step+0x4c>
		}
	}
	else
	{
		/* half step */
		if((param >> 1) & 1)
  d6:	99 23       	and	r25, r25
  d8:	31 f0       	breq	.+12     	; 0xe6 <next_step+0x50>
		{
			if(++step == 0x88)
  da:	91 e0       	ldi	r25, 0x01	; 1
  dc:	92 0f       	add	r25, r18
  de:	27 38       	cpi	r18, 0x87	; 135
  e0:	81 f3       	breq	.-32     	; 0xc2 <next_step+0x2c>
		{
			step = 0x86;
		}
	}

	*state = step;
  e2:	90 83       	st	Z, r25
	return ret;
}
  e4:	08 95       	ret
		else if(--step == 0x7F)
  e6:	9f ef       	ldi	r25, 0xFF	; 255
  e8:	92 0f       	add	r25, r18
  ea:	20 38       	cpi	r18, 0x80	; 128
  ec:	d1 f7       	brne	.-12     	; 0xe2 <next_step+0x4c>
  ee:	f1 cf       	rjmp	.-30     	; 0xd2 <next_step+0x3c>

000000f0 <main>:
#include "stepper.h"
#include <avr/io.h>

int main(void)
{
  f0:	0f 92       	push	r0
  f2:	cd b7       	in	r28, 0x3d	; 61
  f4:	de b7       	in	r29, 0x3e	; 62
	uint8_t step, state = STEPPER_INIT;
  f6:	80 e8       	ldi	r24, 0x80	; 128
  f8:	89 83       	std	Y+1, r24	; 0x01
	for(;;)
	{
		step = next_step(&state, FULL_STEP | FWD);
  fa:	63 e0       	ldi	r22, 0x03	; 3
  fc:	ce 01       	movw	r24, r28
  fe:	01 96       	adiw	r24, 0x01	; 1
 100:	0e 94 4b 00 	call	0x96	; 0x96 <next_step>
		PORTB &= 0xF0;
 104:	25 b1       	in	r18, 0x05	; 5
 106:	20 7f       	andi	r18, 0xF0	; 240
 108:	25 b9       	out	0x05, r18	; 5
		PORTB |= step;
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	98 2b       	or	r25, r24
 10e:	95 b9       	out	0x05, r25	; 5
	for(;;)
 110:	f4 cf       	rjmp	.-24     	; 0xfa <main+0xa>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
